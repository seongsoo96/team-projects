<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	
	<!-- @Transactional 어노테이션을 이용한 트랜잭션관리 활성화 -->
	<tx:annotation-driven />
	
	<!--인터셉터 설정  -->
	<interceptors>
		<interceptor>
			<!-- 인터셉터가 적용될 URL -->
			<mapping path="/admin/**" />
			<!-- 인터셉터에 적용되지 않도록 제외할 페이지(예외 페이지) -->
			<exclude-mapping path="/admin/fail"/>
			<!-- 인터셉터 클래스 지정 -->
			<beans:bean class="ppeonfun.util.interceptor.admin.AdminInterceptor"/>
		</interceptor>
		<interceptor>
		  <mapping path="/user/board/**"/>
		    <exclude-mapping path="/user/board/list"/>
			<exclude-mapping path="/user/board/view"/>
			<exclude-mapping path="/user/board/comments/list"/>
			<exclude-mapping path="/user/board/error"/>
		  <beans:bean class="ppeonfun.util.interceptor.user.UserInterceptor"/>	
		</interceptor> 
		<interceptor>
		  <mapping path="/user/mypage/**"/>
			<exclude-mapping path="/user/mypage/error"/>
		  <beans:bean class="ppeonfun.util.interceptor.user.MypageInterceptor"/>	
		</interceptor>
		<interceptor>
		  <mapping path="/user/maker/**"/>
		  <beans:bean class="ppeonfun.util.interceptor.user.UserMakerInterceptor"/>	
		</interceptor>
		<interceptor>
		 <mapping path="/user/payback/**"/>
		  <beans:bean class="ppeonfun.util.interceptor.user.UserLoginInterceptor"/>	
		</interceptor>
		<interceptor>
		 <mapping path="/user/payment/**"/>
		  <beans:bean class="ppeonfun.util.interceptor.user.UserLoginInterceptor"/>	
		</interceptor>
		<interceptor>
		 <mapping path="/user/reward/**"/>
		  <beans:bean class="ppeonfun.util.interceptor.user.UserLoginInterceptor"/>	
		</interceptor>
		<interceptor>
			<mapping path="/user/notice/**" />
			<beans:bean class="ppeonfun.util.interceptor.user.NoticeInterceptor" />
		</interceptor>
	</interceptors>
	
	
	<!-- JSON응답용 jsonView를 스프링 빈으로 등록하기 -->
	<beans:bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
		<beans:property name="contentType" value="application/json;charset=utf-8"/>
	</beans:bean>
	
	<beans:bean id="mailSender"	class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<beans:property name="host" value="smtp.gmail.com" />
		<beans:property name="port" value="587" /><!-- 465 or 25 -->
		<beans:property name="username" value="tarot1415@gmail.com" />
		<beans:property name="password" value="kteyoqenjdsidypl" />
		<beans:property name="defaultEncoding" value="utf-8" />
		<beans:property name="javaMailProperties">
			<beans:props>
				<beans:prop key="mail.transport.protocol">smtp</beans:prop>
				<beans:prop key="mail.smtp.auth">true</beans:prop>
				<beans:prop key="mail.smtp.starttls.enable">true</beans:prop>
				<beans:prop key="mail.debug">true</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>
	
	
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/upload/**" location="/upload/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="1"/>
	</beans:bean>
	
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver"> 
		<beans:property name="order" value="0"/>
	</beans:bean>
	
	<beans:bean id="down" class="ppeonfun.util.DownloadView" />
	
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 메모리에서 파일을 처리하는 최대 사이즈 제한 : 1MB -->
		<beans:property name="maxInMemorySize" value="1048576"/>
		<!-- 메모리에서 파일을 처리하는 최대 사이즈 제한 : 10MB -->
		<beans:property name="maxUploadSize" value="10485760"/>
		<!-- 업로드된 파일 당 최대 사이즈 : 5MB -->
		<beans:property name="maxUploadSizePerFile" value="5242880"/>
	</beans:bean>
	
	<beans:bean id="startProject" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
	    <!-- 서비스 구현 객체의 빈 이름을 인자로 줍니다. -->
	    <beans:property name="targetObject" ref="admin.QuartzService" />
	    <!-- 서비스 객체에서 주기적으로 실행될 메소드른 지정합니다. -->
	    <beans:property name="targetMethod" value="startProject" />
	    <!-- 동시 실행을 방지합니다. -->
	    <beans:property name="concurrent" value="false" />
	</beans:bean>
	
	<beans:bean id="endProject" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
	    <!-- 서비스 구현 객체의 빈 이름을 인자로 줍니다. -->
	    <beans:property name="targetObject" ref="admin.QuartzService" />
	    <!-- 서비스 객체에서 주기적으로 실행될 메소드른 지정합니다. -->
	    <beans:property name="targetMethod" value="endProject" />
	    <!-- 동시 실행을 방지합니다. -->
	    <beans:property name="concurrent" value="false" />
	</beans:bean>

	<beans:bean id="startJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
    	<beans:property name="jobDetail" ref="startProject" />
    <!-- CronTrigger를 사용하여 2분 간격으로 실행되도록 지정했습니다. -->
    	<beans:property name="cronExpression" value="0 0 0 * * ?" />
	</beans:bean>
	
	<beans:bean id="endJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
    	<beans:property name="jobDetail" ref="endProject" />
    <!-- CronTrigger를 사용하여 2분 간격으로 실행되도록 지정했습니다. -->
    	<beans:property name="cronExpression" value="0 0 0 * * ?" />
	</beans:bean>
	
	<beans:bean id="testJobScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">

    <beans:property name="triggers">
        <!-- 앞에서 설정한 트리거를 등록합니다. 필요하면 여러개 만들어서 등록하면 됩니다. -->
        
        <beans:list>
        	<beans:ref bean="startJobTrigger" />
        	<beans:ref bean="endJobTrigger" />
        </beans:list>
    	</beans:property>
	</beans:bean>
	
	
	<context:component-scan base-package="ppeonfun.controller, ppeonfun.service" />
	
	
	
</beans:beans>
